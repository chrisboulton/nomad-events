nomad:
  address: "http://localhost:4646"
  token: ""

outputs:
  stdout_firehose:
    type: stdout
    format: json
    
  stdout_text:
    type: stdout
    format: text
    text: "{{ .Topic }}/{{ .Type }} - {{ .Payload.Node.Name | default \"unknown\" }} (Index: {{ .Index }})"
    
  slack_everything:
    type: slack
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#general"
    text: "üîî {{ .Topic }}/{{ .Type }} event received (Index: {{ .Index }})"
    
  slack_secret:
    type: slack
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#secret"
    text: "üîí Nomad {{ .Topic }} Event: {{ .Type }}{{if .Key}} (Key: {{ .Key }}){{end}}"
    
  slack_node4:
    type: slack
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#node4-alerts"
    text: "‚ö†Ô∏è Node {{ .Payload.Node.Name | default \"Unknown\" }} - {{ .Type }}"
    
  http_webhook:
    type: http
    url: "https://api.example.com/nomad-events"
    method: "POST"
    headers:
      Authorization: "Bearer your-token-here"
      X-Source: "nomad-events"
    timeout: 30
    
  rabbitmq_events:
    type: rabbitmq
    url: "amqp://guest:guest@localhost:5672/"
    exchange: "nomad.events"
    routing_key: "nomad.{{.Topic}}.{{.Type}}"
    queue: "nomad-events"
    durable: true
    auto_delete: false
    
  exec_processor:
    type: exec
    command: ["python3", "/usr/local/bin/process-nomad-event.py"]
    timeout: 10
    workdir: "/tmp"
    env:
      NOMAD_EVENT_PROCESSOR: "v1.0"
      LOG_LEVEL: "INFO"
      
  exec_simple:
    type: exec
    command: "jq '.Topic + \": \" + .Type'"
    timeout: 5
    
  slack_blockkit_deployments:
    type: slack
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#deployments"
    blocks:
      - type: header
        text: "üöÄ Deployment: {{ .Payload.DeploymentID }}"
      - type: divider
      - type: section
        text:
          type: mrkdwn
          text: "*Status:* {{ .Payload.Status }}\n*Services:* {{ .Payload.ServiceCount }} deployed"
        fields:
          # Static fields
          - type: mrkdwn
            text: "*Started:*"
          - type: plain_text
            text: "{{ .Payload.StartTime }}"
          # Dynamic fields from range - service names
          - range: .Payload.Services
            type: mrkdwn
            text: "*{{ .Name }}:*"
          # Dynamic fields from range - service status
          - range: .Payload.Services
            type: plain_text
            text: "{{ .Status }} {{ .Version }}"
      - type: context
        elements:
          # Static context
          - type: mrkdwn
            text: "Topic: {{ .Topic }} | Type: {{ .Type }}"
          # Dynamic context from range
          - range: .Payload.Tags
            type: mrkdwn
            text: "{{ .Key }}: {{ .Value }}"
      - type: actions
        elements:
          # Static button
          - type: button
            text:
              type: plain_text
              text: "View Details"
            url: "https://nomad.example.com/ui/deployments/{{ .Payload.DeploymentID }}"
            action_id: "view_deployment"
          # Dynamic buttons from range
          - range: .Payload.QuickActions
            type: button
            text:
              type: plain_text
              text: "{{ .Label }}"
            url: "{{ .URL }}"
            action_id: "quick_{{ .ID }}"
          # Select with mixed static and dynamic options
          - type: static_select
            placeholder:
              type: plain_text
              text: "Manage service..."
            action_id: "manage_service"
            options:
              # Static option
              - text:
                  type: plain_text
                  text: "All Services"
                value: "all"
              # Dynamic options from range
              - range: .Payload.Services
                text:
                  type: plain_text
                  text: "{{ .Name }} ({{ .Status }})"
                value: "service_{{ .ID }}"
              # Another static option
              - text:
                  type: plain_text
                  text: "Other Actions..."
                value: "other"
                
  slack_node_events:
    type: slack
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#infrastructure"
    blocks:
      - type: header
        text: "üì° Node Event: {{ .Type }}"
      - type: section
        text:
          type: mrkdwn
          text: "*Node:* {{ .Payload.Node.Name }}\n*Datacenter:* {{ .Payload.Node.Datacenter }}\n*Status:* {{ .Payload.Node.Status }}"
        fields:
          - type: mrkdwn
            text: "*Node ID:*"
          - type: plain_text
            text: "{{ .Payload.Node.ID }}"
          - type: mrkdwn
            text: "*Address:*"
          - type: plain_text
            text: "{{ .Payload.Node.HTTPAddr }}"
      - range: .Payload.Node.Attributes
        type: context
        elements:
          - type: mrkdwn
            text: "‚Ä¢ {{ .Key }}: {{ .Value }}"

routes:
  # Send all events to stdout
  - filter: ""
    output: stdout_firehose
    
  # Send all events to general Slack channel
  - filter: ""
    output: slack_everything
    
  # Send Node registration events to secret channel
  - filter: event.Topic == 'Node' && event.Type == 'NodeRegistration'
    output: slack_secret
    
  # Send node events for node4 to dedicated channel
  - filter: event.Topic == 'Node' && event.Payload.Node.Name == 'node4'
    output: slack_node4
    
  # Send job events to HTTP webhook
  - filter: event.Topic == 'Job'
    output: http_webhook
    
  # Send allocation events to RabbitMQ
  - filter: event.Topic == 'Allocation'
    output: rabbitmq_events
    
  # Process evaluation events with Python script
  - filter: event.Topic == 'Evaluation'
    output: exec_processor
    
  # Extract topic and type from job events with jq
  - filter: event.Topic == 'Job'
    output: exec_simple
    
  # Send deployment events to BlockKit Slack output
  - filter: event.Topic == 'Deployment'
    output: slack_blockkit_deployments
    
  # Send node events to BlockKit Slack output with rich formatting
  - filter: event.Topic == 'Node'
    output: slack_node_events